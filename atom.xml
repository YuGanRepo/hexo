<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yu.gan&#39;s Blog</title>
  <subtitle>Focus Feedback Fix !</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.yucode.cn/"/>
  <updated>2017-07-05T09:58:33.486Z</updated>
  <id>http://www.yucode.cn/</id>
  
  <author>
    <name>Yu Gan</name>
    <email>ganyu1016@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Collectors 类的静态工厂方法</title>
    <link href="http://www.yucode.cn/2017/07/05/Collectors%20%E7%B1%BB%E7%9A%84%E9%9D%99%E6%80%81%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95/"/>
    <id>http://www.yucode.cn/2017/07/05/Collectors 类的静态工厂方法/</id>
    <published>2017-07-05T09:58:33.486Z</published>
    <updated>2017-07-05T09:58:33.486Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Collectors类的静态工厂方法"><a href="#Collectors类的静态工厂方法" class="headerlink" title="Collectors类的静态工厂方法"></a><strong><center>Collectors类的静态工厂方法<center></center></center></strong></h3><a id="more"></a>
<table>
<thead>
<tr>
<th>工厂方法</th>
<th>返回类型</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>toList</td>
<td>List&lt;T&gt;</td>
<td>把流中所以项目收集到一个List</td>
</tr>
<tr>
<td>toSet</td>
<td>Set&lt;T&gt;</td>
<td>把流中所以项目收集到一个Set , 删除重复项</td>
</tr>
<tr>
<td>toCollection</td>
<td>Collection&lt;T&gt;</td>
<td>把流中所以项目收集到给定的供应源创建的集合</td>
</tr>
<tr>
<td>counting</td>
<td>Long</td>
<td>计算流中元素的个数</td>
</tr>
<tr>
<td>summingInt</td>
<td>Integer</td>
<td>对流中项目的一个整数属性求和</td>
</tr>
<tr>
<td>averagingInt</td>
<td>Double</td>
<td>计算流中项目 Integer 属性的平均值</td>
</tr>
<tr>
<td>summarizingInt</td>
<td>IntSummaryStatistics</td>
<td>收集关于流中项目 Integer 属性的统计值 ， 例如最大、最小、总和和平均值</td>
</tr>
<tr>
<td>joining</td>
<td>String</td>
<td>连接对流中每个项目调用 toString 方法所生成的字符串</td>
</tr>
<tr>
<td>maxBy</td>
<td>Optional&lt;T&gt;</td>
<td>一个包裹了流中按照给定比较器选出的最大元素的 Optional , 或如果流为空则为 Optional.empty()</td>
</tr>
<tr>
<td>minBy</td>
<td>Optional&lt;T&gt;</td>
<td>一个包裹了流中按照给定比较器选出的最小元素的 Optional , 或如果流为空则为 Optional.empty()</td>
</tr>
<tr>
<td>reducing</td>
<td>规约操作产生的类型</td>
<td>从一个作为累加器的初始值开始，利用 BinaryOperator 与流中元素逐个结合，从而将流规约为单个值</td>
</tr>
<tr>
<td>colletingAndThen</td>
<td>转换函数返回的类型</td>
<td>包裹另一个收集器，对其结果应用转换函数</td>
</tr>
<tr>
<td>groupingBy</td>
<td>Map&lt;K, List&lt;T&gt;&gt;</td>
<td>根据项目的一个属性的值对流中对项目作问组，并将属性值作为结果 Map 对键</td>
</tr>
<tr>
<td>partitioningBy</td>
<td>Map&lt;Boolean, List&lt;T&gt;&gt;</td>
<td>根据对流中每个项目应用谓词对结果来对项目进行分区</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="部分示例"><a href="#部分示例" class="headerlink" title="部分示例"></a><strong><em>部分示例</em></strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// toList：</span></div><div class="line">List&lt;Dish&gt; dishes = menuStream.collect(toList());</div><div class="line"></div><div class="line"><span class="comment">// toSet：</span></div><div class="line">Set&lt;Dish&gt; dishes = menuStream.collect(toSet());</div><div class="line"></div><div class="line"><span class="comment">// counting</span></div><div class="line"><span class="keyword">long</span> howManyDishes = menuStream.collect(counting());</div><div class="line"></div><div class="line"><span class="comment">// joining</span></div><div class="line">List&lt;String&gt; book = Arrays.asList(<span class="string">"Java 8"</span>, <span class="string">"In"</span>, <span class="string">"Action"</span>);</div><div class="line">String bookStr = book.stream().collect(joining());</div><div class="line"><span class="comment">// Java 8InAction</span></div><div class="line">String bookStr2 = book.stream().collect(joining(<span class="string">","</span>));</div><div class="line"><span class="comment">// Java 8,In,Action</span></div><div class="line"></div><div class="line"><span class="comment">// reducing</span></div><div class="line"><span class="keyword">int</span> totalCalories = menuStream.collect(reducing(<span class="number">0</span>, Dish::getCalories, Integer::sum))</div><div class="line"><span class="comment">// 计算所有菜的卡路里</span></div><div class="line"></div><div class="line"><span class="comment">// groupingBy</span></div><div class="line">Map&lt;Dish.Type, List&lt;Dish&gt;&gt; dishesByType = menuStream.collect(grouppingBy(Dish::getType))</div><div class="line"><span class="comment">// 按菜单类型分组</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Collectors类的静态工厂方法&quot;&gt;&lt;a href=&quot;#Collectors类的静态工厂方法&quot; class=&quot;headerlink&quot; title=&quot;Collectors类的静态工厂方法&quot;&gt;&lt;/a&gt;&lt;strong&gt;&lt;center&gt;Collectors类的静态工厂方法&lt;center&gt;&lt;/center&gt;&lt;/center&gt;&lt;/strong&gt;&lt;/h3&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.yucode.cn/categories/java/"/>
    
    
      <category term="Java" scheme="http://www.yucode.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java 8 新特性</title>
    <link href="http://www.yucode.cn/2017/07/04/Java%208%20%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://www.yucode.cn/2017/07/04/Java 8 新特性/</id>
    <published>2017-07-04T02:54:55.382Z</published>
    <updated>2017-07-04T02:54:55.382Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a><strong>1.简介</strong></h2><p>毫无疑问，Java 8是Java自Java 5（发布于2004年）之后的最重要的版本。这个版本包含语言、编译器、库、工具和JVM等方面的十多个新特性。在本文中我们将学习这些新特性，并用实际的例子说明在什么场景下适合使用。<br><a id="more"></a><br>这个教程包含Java开发者经常面对的几类问题：</p>
<ul>
<li>列表内容</li>
<li>语言</li>
<li>列表内容</li>
<li>编译器</li>
<li>库</li>
<li>工具</li>
<li>运行时（JVM）</li>
</ul>
<h2 id="2-Java语言的新特性"><a href="#2-Java语言的新特性" class="headerlink" title="2. Java语言的新特性"></a><strong>2. Java语言的新特性</strong></h2><p>Java 8是Java的一个重大版本，有人认为，虽然这些新特性领Java开发人员十分期待，但同时也需要花不少精力去学习。在这一小节中，我们将介绍Java 8的大部分新特性。</p>
<hr>
<h2 id="2-1-Lambda表达式和函数式接口"><a href="#2-1-Lambda表达式和函数式接口" class="headerlink" title="2.1 Lambda表达式和函数式接口"></a><strong>2.1 Lambda表达式和函数式接口</strong></h2><p>Lambda表达式（也称为闭包）是Java 8中最大和最令人期待的语言改变。它允许我们将函数当成参数传递给某个方法，或者把代码本身当作数据处理：函数式开发者非常熟悉这些概念。很多JVM平台上的语言（Groovy、Scala等）从诞生之日就支持Lambda表达式，但是Java开发者没有选择，只能使用匿名内部类代替Lambda表达式。<br>Lambda的设计耗费了很多时间和很大的社区力量，最终找到一种折中的实现方案，可以实现简洁而紧凑的语言结构。最简单的Lambda表达式可由逗号分隔的参数列表、-&gt;符号和语句块组成，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Arrays.asList( <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"d"</span> ).forEach( e -&gt; System.out.println( e ) );</div></pre></td></tr></table></figure>
<p>如果Lambda表达式需要更复杂的语句块，则可以使用花括号将该语句块括起来，类似于Java中的函数体，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Arrays.asList( <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"d"</span> ).forEach( e -&gt; &#123;</div><div class="line">    System.out.print( e );</div><div class="line">&#125; );</div></pre></td></tr></table></figure>
<h2 id="4-Streams"><a href="#4-Streams" class="headerlink" title="4. Streams"></a><strong>4. Streams</strong></h2><p><strong><em>未完待续…</em></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1.简介&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.简介&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;毫无疑问，Java 8是Java自Java 5（发布于2004年）之后的最重要的版本。这个版本包含语言、编译器、库、工具和JVM等方面的十多个新特性。在本文中我们将学习这些新特性，并用实际的例子说明在什么场景下适合使用。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.yucode.cn/categories/java/"/>
    
    
      <category term="Java" scheme="http://www.yucode.cn/tags/java/"/>
    
      <category term="编程语言" scheme="http://www.yucode.cn/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.yucode.cn/2017/06/27/hello-world/"/>
    <id>http://www.yucode.cn/2017/06/27/hello-world/</id>
    <published>2017-06-27T12:02:57.928Z</published>
    <updated>2017-06-27T12:02:57.928Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
